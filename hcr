#!/usr/bin/python3
## written by unix-ninja

import argparse
import sys

############################################################
## Parse options

parser = argparse.ArgumentParser(description='Hashcat Rules processor')
parser.add_argument('-d', dest='debug', action='store_true', help='enable debugging')
parser.add_argument('rules', type=str, nargs='?', help='rule')
parser.add_argument('-i', dest='interactive', action='store_true', help='use an interactive console')
parser.add_argument('-r', dest='rule_file', type=str, help='specify a rule file to use')
parser.add_argument('-w', dest='wordlist', type=str, help='specify a wordlist to apply rules to')
args = parser.parse_args()

############################################################
## Functions

## This will apply the rules
def transform(plain, rules):
  plain = plain.rstrip()
  memorize = ""
  idx = 0
  alphanum_list = list('0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ')
  while idx < len(rules):
    rule = rules[idx]
    if rule == ':':
      pass
    elif rule == ' ':
      pass
    elif rule == 'M':
      memorize = plain
    elif rule == '4':
      plain += memorize
    elif rule == '6':
      plain = memorize + plain
    elif rule == 'l':
      plain = plain.lower()
    elif rule == 'u':
      plain = plain.upper()
    elif rule == 'c':
      plain = plain.lower()
      plain = plain.capitalize()
    elif rule == 'C':
      if len(plain) > 1:
        plain = plain[0].lower() + plain[1:].upper()
      elif len(plain) == 1:
        plain = plain[0].lower()
      pass
    elif rule == 'E':
      plain = plain.title()
    elif rule == 't':
      plain = ''.join(c.lower() if c.isupper() else c.upper() for c in plain)
    elif rule == 'T':
      idx += 1
      pos = alphanum_list.index(rules[idx].upper())
      if pos < len(plain):
        plain = plain[:pos] + ''.join(c.lower() if c.isupper() else c.upper() for c in plain[pos]) + plain[pos+1:]
    elif rule == 'r':
      plain = plain[::-1]
    elif rule == 'd':
      plain = plain + plain
    elif rule == 'p':
      buf = plain
      idx += 1
      itr = alphanum_list.index(rules[idx].upper())
      for i in range(itr):
        plain = plain + buf
    elif rule == 'f':
      plain = plain + plain[::-1]
    elif rule == '{':
      if len(plain) > 2:
        plain = plain[1:] + plain[0]
    elif rule == '}':
      if len(plain) > 2:
        plain = plain[-1] + plain[0:-1]
    elif rule == '$':
      idx += 1
      c = rules[idx]
      plain = plain + c
    elif rule == '^':
      idx += 1
      c = rules[idx]
      plain = c + plain
    elif rule == '[':
      plain = plain[1:]
    elif rule == ']':
      plain = plain[:-1]
    elif rule == 'D':
      idx += 1
      pos = alphanum_list.index(rules[idx].upper())
      if pos < len(plain):
        plain = plain[:pos] + plain[pos+1:]
    elif rule == 'x':
      idx += 1
      pos = alphanum_list.index(rules[idx].upper())
      idx += 1
      count = alphanum_list.index(rules[idx].upper())
      plain = plain[0:pos] + plain[pos+count:]
    elif rule == 'O':
      idx += 1
      pos = alphanum_list.index(rules[idx].upper())
      idx += 1
      count = alphanum_list.index(rules[idx].upper())
      plain = plain[0:pos] + plain[pos+count:]
    elif rule == 'i':
      idx += 1
      pos = alphanum_list.index(rules[idx].upper())
      idx += 1
      c = str(rules[idx])
      plain = plain[0:pos] + c + plain[pos:]
    elif rule == 'o':
      idx += 1
      pos = alphanum_list.index(rules[idx].upper())
      idx += 1
      c = str(rules[idx])
      plain = plain[0:pos] + c + plain[pos+1:]
    elif rule == "'":
      idx += 1
      pos = alphanum_list.index(rules[idx].upper())
      plain = plain[:pos]
    elif rule == 's':
      idx += 1
      x = str(rules[idx])
      idx += 1
      y = str(rules[idx])
      plain = plain.replace(x,y)
    elif rule == '@':
      idx += 1
      x = str(rules[idx])
      plain = plain.replace(x, '')
    elif rule == 'z':
      buf = plain
      idx += 1
      itr = alphanum_list.index(rules[idx].upper())
      c = plain[0:1]
      for i in range(itr):
        plain = c + plain
    elif rule == 'Z':
      buf = plain
      idx += 1
      itr = alphanum_list.index(rules[idx].upper())
      c = plain[-1:]
      for i in range(itr):
        plain = plain + c
    elif rule == 'q':
      buf = ''
      for c in list(plain):
        buf += c + c
      plain = buf
    elif rule == 'k':
      if len(plain) > 2:
        plain = plain[1] + plain[0] + plain [2:]
      elif len(plain) == 2:
        plain = plain[1] + plain[0]
    elif rule == 'K':
      if len(plain) > 2:
        plain = plain[:-2] + plain[-1] + plain[-2]
      elif len(plain) == 2:
        plain = plain[-1] + plain[-2]
    elif rule == '*':
      buf = list(plain)
      idx += 1
      pos1 = alphanum_list.index(rules[idx].upper())
      idx += 1
      pos2 = alphanum_list.index(rules[idx].upper())
      if pos1 < len(plain) and pos2 < len(plain):
        x = plain[pos1]
        y = plain[pos2]
        buf[pos1] = y
        buf[pos2] = x
      plain = ''.join(buf)
    elif rule == 'L':
      buf = list(plain)
      idx += 1
      pos = alphanum_list.index(rules[idx].upper())
      if pos < len(buf):
        buf[pos] = chr(int(ord(buf[pos])) << 1)
      plain = ''.join(buf)
    elif rule == 'R':
      buf = list(plain)
      idx += 1
      pos = alphanum_list.index(rules[idx].upper())
      if pos < len(buf):
        buf[pos] = chr(int(ord(buf[pos])) >> 1)
        plain = ''.join(buf)
    elif rule == '+':
      buf = list(plain)
      idx += 1
      pos = alphanum_list.index(rules[idx].upper())
      if pos < len(buf):
        buf[pos] = chr(int(ord(buf[pos])) + 1)
      plain = ''.join(buf)
    elif rule == '-':
      buf = list(plain)
      idx += 1
      pos = alphanum_list.index(rules[idx].upper())
      if pos < len(buf) and pos > 0:
        buf[pos] = chr(int(ord(buf[pos])) - 1)
        plain = ''.join(buf)
    elif rule == '.':
      buf = list(plain)
      idx += 1
      pos = alphanum_list.index(rules[idx].upper())
      if pos < len(buf)-1 and pos > 0:
        buf[pos] = buf[pos+1]
        plain = ''.join(buf)
    elif rule == ',':
      buf = list(plain)
      idx += 1
      pos = alphanum_list.index(rules[idx].upper())
      if pos < len(buf) and pos > 0:
        buf[pos] = buf[pos-1]
        plain = ''.join(buf)
    elif rule == 'y':
      idx += 1
      pos = alphanum_list.index(rules[idx].upper())
      buf = plain[0:pos]
      plain = buf + plain
    elif rule == 'Y':
      idx += 1
      pos = alphanum_list.index(rules[idx].upper())
      buf = plain[-pos:]
      plain = plain + buf
    else:
      print ('Err: bad rule "%s".' % rule )
      sys.exit(1)
    idx += 1
  print (plain)

def run_rules(plain):
  ## check if we are using  a rule file
  if args.rule_file:
    with open(args.rule_file) as rule_file:
      for rules in rule_file:
	## we aggresively strip here. Make sure lines end with a space to make up for that
        rules = rules.rstrip()+" "
        if rules and rules[0] != '#':
          if args.debug:
              print("rules: %s" % (rules))
          transform(plain, rules)
  ## Use stdin otherwise
  else:
    transform(plain, args.rules)

def use_wordlist(wordlist):
  with open(wordlist) as wordlist:
    for plain in wordlist:
      plain = plain.rstrip()
      if plain:
        run_rules(plain)

def console_help():
  print ("exit                     quit hcr")
  print ("p  |  plain <string>     use the specified plain in tests")
  print ("w  |  wordlist <file>    use a file for plains in tests")
  print ("r  |  rules <rules>      test candidate rules")
  print ("rf |  rulefile <file>    use a file to test candidate rules")

def console():
  ## set a default plain
  plain = 'p@ssW0rd'
  wordlist = None
  prompt = 'hcr> '
  print ("Interactive console. Type '?' for help")
  while True:
    ## deal with prompt stuff
    sys.stdout.write(prompt)
    sys.stdout.flush()
    line = sys.stdin.readline().strip()
    ## set the first word of inpiut as our command
    cmd = line.split()[0]
    ## cmd_arg will be our local storage, args is still global
    cmd_arg = line[len(cmd):].strip()
    ## process our commands
    if cmd == '?':
      console_help()
    elif cmd == 'p' or cmd == 'plain':
      plain = cmd_arg
      wordlist = None
    elif cmd == 'w' or cmd == 'wordlist':
      wordlist = cmd_arg
      plain = None
    elif cmd == 'r' or cmd == 'rules':
      args.rule_file = None
      args.rules = cmd_arg
      if wordlist:
        use_wordlist(wordlist)
      else:
        run_rules(plain)
    elif cmd == 'rf' or cmd == 'rulefile':
      args.rule_file = cmd_arg
      args.rules = None
      if wordlist:
        use_wordlist(wordlist)
      else:
        run_rules(plain)
    elif cmd == 'exit':
      sys.exit(0)

############################################################
## Main App

if args.interactive:
  console()
  sys.exit(0)

## if we aren't interactive we must specify either a rule file or a set of rules
if (not args.rules and not args.rule_file):
  print ('Err: You must specify rules or rule file.')
  sys.exit(2)

if args.wordlist:
  ## use a wordlist if we have one
  use_wordlist(args.wordlist)
else:
  ## use stdin if there's no wordlist
  for plain in sys.stdin:
    plain = plain.rstrip()
    if plain:
      run_rules(plain)
